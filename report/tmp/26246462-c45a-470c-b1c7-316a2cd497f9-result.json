{"name": "test_learn", "status": "broken", "statusDetails": {"message": "pytest_yaml_yoyo.exceptions.ParserError: Parsers error: name 'get_course_list' is not defined", "trace": "request = <FixtureRequest for <Function test_learn>>\nrequests_session = <pytest_yaml_yoyo.http_session.HttpSession object at 0x0000020E9D6297C0>\n\n>   ???\n\ntest_learn.py:2: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = {'request': <FixtureRequest for <Function test_learn>>, 'requests_session': <pytest_yaml_yoyo.http_session.HttpSession object at 0x0000020E9D6297C0>}\n\n    def execute_yaml_case(args):\n        # 获取被调用函数名称\n        log.info(f'执行文件-> {self.module.__name__}.yml')\n        log.info(f'base_url-> {base_url or args.get(\"request\").config.option.base_url}')\n        log.info(f'variables-> {self.module_variable}')\n        call_function_name = inspect.getframeinfo(inspect.currentframe().f_back)[2]\n        log.info(f'运行用例-> {call_function_name}')\n        # 添加 allure 报告--> story\n        allure.dynamic.feature(f'{self.module.__name__}.yml')\n    \n        for step in case[call_function_name]:\n            # 添加 allure 报告--> title\n            allure.dynamic.title(call_function_name)\n            response = None\n            api_validate = []\n            step_name = step.get('name', 'not step name')\n            # 添加 allure 报告--> step\n            with allure.step(step_name):\n                pass\n            for item, value in step.items():\n                # 执行用例里面的方法\n                if item == 'name':\n                    pass          # noqa\n                elif item == 'api':\n                    root_dir = args.get('request').config.rootdir   # 内置request 获取root_dir\n                    api_path = Path(root_dir).joinpath(value)\n                    raw_api = yaml.safe_load(api_path.open(encoding='utf-8'))\n                    api_validate = raw_api.get('validate')\n                    copy_value = copy.deepcopy(raw_api.get('request'))  # 深拷贝一份新的value\n                    response = self.run_request(args, copy_value, config_hooks, base_url)\n                elif item == 'request':\n                    copy_value = copy.deepcopy(value)  # 深拷贝一份新的value\n                    response = self.run_request(args, copy_value, config_hooks, base_url)\n                elif item == 'extract':\n                    # 提取变量\n                    copy_value = copy.deepcopy(value)\n                    extract_value = render_template_obj.rend_template_any(copy_value, **self.context)\n                    extract_result = self.extract_response(response, extract_value)\n                    log.info(f'extract 提取变量-> {extract_result}')\n                    # 添加到模块变量\n                    self.module_variable.update(extract_result)\n                    if isinstance(self.module_variable, dict):\n                        self.context.update(self.module_variable)    # 加载模块变量\n                elif item == 'validate':\n                    copy_value = copy.deepcopy(value)\n                    # 合并校验\n                    api_validate.extend([v for v in copy_value if v not in api_validate])\n                    validate_value = render_template_obj.rend_template_any(api_validate, **self.context)\n                    log.info(f'validate 校验内容-> {validate_value}')\n                    self.validate_response(response, validate_value)\n                elif item == 'sleep':\n                    sleep_value = render_template_obj.rend_template_any(value, **self.context)\n                    try:\n                        log.info(f'sleep time: {sleep_value}')\n                        time.sleep(sleep_value)\n                    except Exception as msg:\n                        log.error(f'Run error: sleep value must be int or float, error msg: {msg}')\n                elif item == 'skip':\n                    skip_reason = render_template_obj.rend_template_any(value, **self.context)\n                    import pytest\n                    pytest.skip(skip_reason)\n                elif item == 'skipif':   # noqa\n                    if_exp = render_template_obj.rend_template_any(value, **self.context)\n                    log.info(f'skipif : {eval(str(if_exp))}')  # noqa\n                    if eval(str(if_exp)):\n                        import pytest\n                        pytest.skip(str(if_exp))\n                else:\n                    try:\n                        eval(item)(value)\n                    except Exception as msg:\n>                       raise exceptions.ParserError(f'Parsers error: {msg}') from None\nE                       pytest_yaml_yoyo.exceptions.ParserError: Parsers error: name 'get_course_list' is not defined\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\pytest_yaml_yoyo\\runner.py:139: ParserError"}, "description": "test_learn", "steps": [{"name": "not step name", "status": "passed", "start": 1680710535392, "stop": 1680710535392}], "attachments": [{"name": "log", "source": "d3635387-2b6c-400c-bef4-fed110d78df9-attachment.txt", "type": "text/plain"}], "start": 1680710535391, "stop": 1680710535392, "uuid": "36fd17fe-a9bf-481c-b636-1d1d8fcd233a", "historyId": "cf14499d428cb513c6ea9ed02d7183ce", "testCaseId": "fe463c780ac3e525361d3950d3cf52cc", "fullName": "testcase.learn.test_learn#test_learn", "labels": [{"name": "feature", "value": "test_learn.yml"}, {"name": "parentSuite", "value": "testcase.learn"}, {"name": "suite", "value": "test_learn"}, {"name": "host", "value": "PC-202209231525"}, {"name": "thread", "value": "17280-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.learn.test_learn"}]}